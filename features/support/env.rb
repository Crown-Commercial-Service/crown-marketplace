# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'cucumber/rspec/doubles'
require 'factory_bot_rails'
require 'capybara'
require 'capybara/cucumber'
require 'capybara/rspec'
require 'selenium-webdriver'

ENV['SITEPRISM_DSL_VALIDATION_DISABLED'] = 'true'
require 'site_prism'
require 'capybara/poltergeist'
require 'axe-capybara'
require 'axe-cucumber-steps'
require 'rake'
require 'database_cleaner-active_record'

# Require files we've created to help with the setup
require_relative '../support/pages'

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# This allows us to use the factories we have already created in our cucumber tests
World(FactoryBot::Syntax::Methods)
World(Pages)

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# For running the rake task to relaod the test data
Rails.application.load_tasks

# Because we need to restore some data for JavaScript tests we need to invoke the Database strategy ourselves
Cucumber::Rails::Database.autorun_database_cleaner = false

# Capybara settings can go here
Capybara.ignore_hidden_elements = false

Capybara.javascript_driver = :selenium_headless
